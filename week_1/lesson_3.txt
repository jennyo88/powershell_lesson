PowerShell Pipeline
=================================================================================

---------------------------------------------------------------------------------
Overview:
---------------------------------------------------------------------------------
The PowerShell pipeline is a powerful feature that allows you to chain together commands, passing the output of one command as input to another.
Understanding how to effectively use the pipeline can greatly simplify and streamline your PowerShell scripts.

---------------------------------------------------------------------------------
Commands Covered:
---------------------------------------------------------------------------------
1. Select-Object:
   - Description: Selects specified properties of objects.
   - Syntax: Select-Object [-Property] <String[]> [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-Unique] [-First <Int32>] [-Skip <Int32>] [<CommonParameters>]
   - Example: Get-Process | Select-Object Name, Id
   - This command allows you to choose specific properties of objects to display. For instance, running `Get-Process | Select-Object Name, Id` will only display the Name and Id properties of process objects.

2. Where-Object:
   - Description: Filters objects based on specified criteria.
   - Syntax: Where-Object [-FilterScript] <ScriptBlock> [<CommonParameters>]
   - Example: Get-Process | Where-Object { $_.WorkingSet -gt 100MB }
   - This command filters objects based on a specified condition. For example, running `Get-Process | Where-Object { $_.WorkingSet -gt 100MB }` will only display processes with a working set greater than 100 megabytes.

3. ForEach-Object:
   - Description: Performs an operation on each item in a collection of objects.
   - Syntax: ForEach-Object [-Process] <ScriptBlock> [-Begin <ScriptBlock>] [-End <ScriptBlock>] [-InputObject <PSObject>] [<CommonParameters>]
   - Example: Get-Service | ForEach-Object { Restart-Service $_.Name }
   - This command is used to execute a script block for each object in a collection. For example, running `Get-Service | ForEach-Object { Restart-Service $_.Name }` will restart each service.

---------------------------------------------------------------------------------
Practice:
---------------------------------------------------------------------------------
To gain proficiency in using the PowerShell pipeline, it's essential to practice combining commands and leveraging the pipeline effectively. Here are some practice tasks for Lesson 3:

1. Filter and customize process information:
   - Use the Get-Process cmdlet to retrieve a list of processes running on your system.
   - Pipe the output to Select-Object to display only the Name and CPU properties for each process.
   - Experiment with different properties and combinations to customize the output according to your requirements.

2. Filter services by status:
   - Use the Get-Service cmdlet to retrieve a list of services installed on your system.
   - Pipe the output to Where-Object to filter services based on their status (e.g., Running or Stopped).
   - Explore different conditions and criteria to selectively process services according to their status.

3. Perform custom actions on files:
   - Use the Get-ChildItem cmdlet to retrieve a list of files in a directory.
   - Pipe the output to ForEach-Object to perform a custom action (e.g., displaying file names) for each file.
   - Experiment with different script blocks and operations to manipulate and process files as needed.

By practicing these tasks, you will become more proficient in using the PowerShell pipeline and leveraging its capabilities to streamline your workflow and automate repetitive tasks effectively.
