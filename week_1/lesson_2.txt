Working with Objects and Variables
=================================================================================

Overview:
---------------------------------------------------------------------------------
In this lesson, we'll delve into the fundamentals of PowerShell regarding objects and variables. Understanding how PowerShell handles objects and variables is crucial for effective scripting and automation.
Here's a breakdown of the topics covered:

1. Object Properties:
   - Objects in PowerShell are structured data entities that contain properties and methods.
   - Accessing object properties involves using dot notation, where you specify the object followed by a period and the property name.
   - Manipulating object properties allows you to extract, modify, or interact with the data contained within objects.

    Example:
    ```powershell
    $obj = [PSCustomObject]@{
        Name = "John"
        Age = 30
    }

    # Accessing object properties
    $name = $obj.Name
    $age = $obj.Age
    ```

2. Variable Types:
   - PowerShell supports various types of variables, including strings, integers, arrays, and hash tables.
   - Variables can be implicitly or explicitly typed. Implicit typing means PowerShell determines the variable type based on the assigned value, while explicit typing involves specifying the variable type explicitly.
   - Understanding variable types is essential for effectively storing and manipulating different kinds of data in your scripts.

    Example:
    ```powershell
    # Implicit typing
    $name = "John"
    $age = 30

    # Explicit typing
    [int]$count = 5
    [string[]]$names = @("John", "Jane", "Doe")
    ```

3. Variable Scope:
   - Variable scope determines where in your script a variable is accessible and usable.
   - PowerShell offers several variable scopes, including local, script, global, and environment scope.
   - Local variables are confined to the current scope, script variables are accessible within the script file, global variables are accessible across the entire PowerShell session, and environment variables are system-wide variables accessible to all processes.

    Example:
    ```powershell
    # Local variable
    $localVariable = "Local"

    # Script variable
    $script:scriptVariable = "Script"

    # Global variable
    $global:globalVariable = "Global"

    # Environment variable
    [Environment]::SetEnvironmentVariable("EnvVariable", "Environment", "Machine")
    ```

Practice:
---------------------------------------------------------------------------------
To reinforce learning, let's practice the following tasks:

1. Create an object and access its properties using dot notation. This will help solidify your understanding of working with object properties.

2. Assign values to variables of different types (string, integer, array, hash table) and manipulate them. This exercise will familiarize you with the various variable types and how to interact with them.

3. Experiment with variable scope by defining variables in different scopes and accessing them from various contexts. Understanding variable scope is crucial for writing robust and maintainable scripts.

By completing these tasks, you will gain a solid understanding of working with objects and variables in PowerShell, empowering you to write more efficient and versatile scripts.
