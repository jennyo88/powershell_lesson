Lesson 2: Working with Objects in PowerShell
=================================================================================

Overview:
---------------------------------------------------------------------------------
Understanding how PowerShell handles objects is crucial for effective scripting and automation. Objects in PowerShell are structured data entities that contain properties and methods. This lesson will cover the basics of working with objects in PowerShell, including accessing object properties and manipulating object data.

Topics Covered:
---------------------------------------------------------------------------------
1. Introduction to Objects:
   - Explanation of what objects are in PowerShell and their significance.
   - Understanding the structure of objects, including properties and methods.

    Objects in PowerShell represent structured data entities that encapsulate properties (attributes or characteristics) and methods (actions or behaviors). These objects are fundamental to PowerShell as they enable the manipulation and automation of data within the scripting environment.

2. Accessing Object Properties:
   - Using dot notation to access properties of objects.
   - Demonstrating how to retrieve specific information from objects.

    In PowerShell, you can access properties of objects using dot notation. This involves specifying the object followed by a period and the property name. For example, to access the Name property of a process object retrieved using the Get-Process cmdlet, you would use $process.Name.

3. Manipulating Object Data:
   - Performing actions on object properties to modify or manipulate data.
   - Examples of common operations performed on object data.

    PowerShell allows you to perform various operations on object data to modify or manipulate it according to your requirements. These operations can include filtering, sorting, calculating values, and more. By leveraging these capabilities, you can efficiently process and manage data within your scripts.

Practice:
---------------------------------------------------------------------------------
To gain proficiency in working with objects in PowerShell, practice the following tasks:

1. Create custom objects:
   - Define custom objects using the [PSCustomObject] type accelerator.
   - Add properties to custom objects and assign values.

    Example:
    ```powershell
    # Define a custom object with properties
    $person = [PSCustomObject]@{
        Name = "John"
        Age = 30
        City = "New York"
    }
    ```

2. Access properties of built-in objects:
   - Retrieve information about processes using the Get-Process cmdlet.
   - Access specific properties of process objects, such as Name, ID, and CPU usage.

    Example:
    ```powershell
    # Retrieve process objects and access properties
    $processes = Get-Process
    $processName = $processes.Name
    ```

3. Manipulate object data:
   - Perform operations on object properties, such as filtering, sorting, or calculating values.
   - Experiment with different actions to manipulate object data according to your requirements.

    Example:
    ```powershell
    # Filter processes based on CPU usage
    $highCPUProcesses = $processes | Where-Object { $_.CPU -gt 50 }
    ```

By practicing these tasks, you will enhance your proficiency in working with objects in PowerShell, enabling you to create more robust and efficient scripts.
