Working with Objects
=================================================================================

---------------------------------------------------------------------------------
Overview:
---------------------------------------------------------------------------------
PowerShell is based on the .NET Framework and treats everything as an object. Understanding how to work with objects in PowerShell is crucial for effective scripting and automation. This lesson will cover the basics of working with objects, including retrieving object properties and methods.

---------------------------------------------------------------------------------
Commands Covered:
---------------------------------------------------------------------------------
1. Get-Member:
   - Description: Displays the properties and methods of objects.
   - Syntax: Get-Member [[-InputObject] <PSObject>] [-MemberType <MemberTypes[]>] [-Static] [-Force] [-View <String>] [<CommonParameters>]
   - Example: Get-Process | Get-Member
   - This command is used to explore the properties and methods of objects returned by other cmdlets. For example, running `Get-Process | Get-Member` will display all properties and methods of the process objects.

2. Select-Object:
   - Description: Selects specified properties of objects.
   - Syntax: Select-Object [-Property] <String[]> [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-Unique] [-First <Int32>] [-Skip <Int32>] [<CommonParameters>]
   - Example: Get-Process | Select-Object Name, Id
   - This command allows you to choose specific properties of objects to display. For instance, running `Get-Process | Select-Object Name, Id` will only display the Name and Id properties of process objects.

3. ForEach-Object:
   - Description: Performs an operation on each item in a collection of objects.
   - Syntax: ForEach-Object [-Process] <ScriptBlock> [-Begin <ScriptBlock>] [-End <ScriptBlock>] [-InputObject <PSObject>] [<CommonParameters>]
   - Example: Get-Service | ForEach-Object { Write-Host $_.Name }
   - This command is used to execute a script block for each object in a collection. For example, running `Get-Service | ForEach-Object { Write-Host $_.Name }` will display the name of each service.

---------------------------------------------------------------------------------
Practice:
---------------------------------------------------------------------------------
1. Retrieve information about a file:
   - Use the Get-Item cmdlet to retrieve information about a specific file on your system.
   - Pipe the output of Get-Item to Get-Member to explore the properties and methods available for file objects.
   - Examine properties such as Name, Length, CreationTime, and LastWriteTime to understand how PowerShell represents file metadata.

2. List all processes running on your system:
   - Use the Get-Process cmdlet to retrieve a list of all processes currently running on your system.
   - Pipe the output of Get-Process to Get-Member to explore the properties and methods available for process objects.
   - Examine properties such as ID, Name, CPU, and Memory to gain insights into process-related information.

3. Retrieve information about services:
   - Use the Get-Service cmdlet to retrieve a list of all services installed on your system.
   - Pipe the output of Get-Service to Get-Member to explore the properties and methods available for service objects.
   - Examine properties such as DisplayName, Status, StartType, and CanPauseAndContinue to understand service-related information.

By practicing these tasks, you will become more familiar with working with objects in PowerShell and develop the skills necessary to manipulate and manage data effectively in your scripts and automation tasks.
