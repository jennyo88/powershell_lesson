Scripting and Automation with PowerShell Functions
=================================================================================

Overview:
---------------------------------------------------------------------------------
Functions are a fundamental aspect of PowerShell scripting, allowing you to encapsulate reusable blocks of code.
Understanding how to create and use functions is essential for building modular and maintainable scripts.
This lesson will cover the basics of scripting and automation with PowerShell functions, including function definition, parameterization, and usage.

Topics Covered:
---------------------------------------------------------------------------------
1. Introduction to PowerShell Functions:
   - Explanation of what functions are and their role in PowerShell scripting.
   - Understanding the benefits of using functions for code encapsulation and reuse.

    Example:
    ```powershell
    # Function to greet a user
    function Get-Greeting {
        param(
            [string]$Name
        )
        "Hello, $Name!"
    }

    # Call the function
    Get-Greeting -Name "John"
    ```

2. Defining Functions:
   - Syntax for defining functions in PowerShell.
   - Naming conventions and best practices for function names.

    Example:
    ```powershell
    # Function to calculate the square of a number
    function Square {
        param(
            [int]$Number
        )
        return $Number * $Number
    }
    ```

3. Parameterizing Functions:
   - Adding parameters to functions to make them more flexible and versatile.
   - Specifying parameter types, default values, and validation.

    Example:
    ```powershell
    # Function to greet a user with optional message
    function Get-Greeting {
        param(
            [string]$Name,
            [string]$Message = "Hello"
        )
        "$Message, $Name!"
    }
    ```

4. Using Functions:
   - Calling functions from within scripts and the PowerShell console.
   - Passing arguments to functions and handling return values.

    Example:
    ```powershell
    # Function to add two numbers
    function Add-Numbers {
        param(
            [int]$Num1,
            [int]$Num2
        )
        return $Num1 + $Num2
    }

    # Call the function and store the result
    $sum = Add-Numbers -Num1 10 -Num2 20
    ```

Practice:
---------------------------------------------------------------------------------
To gain proficiency in scripting and automation with PowerShell functions, practice the following tasks:

1. Create a function to automate a specific task:
   - Identify a repetitive task in your workflow that can be automated with a PowerShell function.
   - Define a function that encapsulates the necessary steps to perform the task.
   - Test the function with different inputs to ensure it behaves as expected.

2. Parameterize an existing script with a function:
   - Take an existing PowerShell script that performs a specific task.
   - Refactor the script to convert the main logic into a function.
   - Add parameters to the function to make it more flexible and reusable.

3. Utilize functions in a script:
   - Write a PowerShell script that utilizes multiple functions to accomplish a complex task.
   - Organize the script by grouping related functions together.
   - Test the script with various scenarios to verify its functionality.

By practicing these tasks, you will enhance your proficiency in scripting and automation with PowerShell functions, empowering you to build efficient and maintainable scripts for a wide range of use cases.
