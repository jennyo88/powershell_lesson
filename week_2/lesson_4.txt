Scripting Basics
=================================================================================

---------------------------------------------------------------------------------
Overview:
---------------------------------------------------------------------------------
Scripting in PowerShell involves creating reusable scripts to automate tasks, perform complex operations, and interact with various system components. This lesson will cover the basics of PowerShell scripting, including script structure, variables, flow control, and functions.

---------------------------------------------------------------------------------
Script Structure:
---------------------------------------------------------------------------------
A PowerShell script typically consists of a series of commands and statements that are executed sequentially. Here's an example of a basic PowerShell script:

Example:
   ```powershell
      
      # This is a comment
      Write-Host "Hello, world!"
   
   ```

You can save this script in a .ps1 file (e.g., HelloWorld.ps1) and run it from the command line using the PowerShell interpreter:

   ```powershell
      
      PS C:\Scripts> .\HelloWorld.ps1
      Hello, world!

   ```

Variables:
Variables in PowerShell are used to store data that can be referenced and manipulated throughout a script. Here's how you can declare and use variables:

Example:

   ```powershell
      
      $name = "John"
      $age = 30
      $pi = 3.14
      $isWorking = $true

      Write-Host "Name: $name"
      Write-Host "Age: $age"
      Write-Host "PI: $pi"
      Write-Host "Is working: $isWorking"

   ```

Flow Control:
PowerShell provides various constructs for controlling the flow of execution in a script, such as conditional statements and looping structures.

Example (Conditional Statement - If/Else):

   ```powershell

      $number = 10

      if ($number -gt 0) {
          Write-Host "$number is positive"
      } elseif ($number -lt 0) {
          Write-Host "$number is negative"
      } else {
          Write-Host "$number is zero"
      }

   ```
Example (Looping Structure - ForEach):
      
   ```powershell

      $numbers = 1..5
      
      foreach ($num in $numbers) {
          Write-Host "Number: $num"
      }

   ```

Functions:
Functions in PowerShell allow you to encapsulate a block of code that can be reused multiple times within a script. Here's how you can define and use a function:

Example:

   ```powershell

      function Get-Sum {
          param (
              [int]$num1,
              [int]$num2
          )
      
          $sum = $num1 + $num2
          return $sum
      }
      
      $result = Get-Sum -num1 5 -num2 3
      Write-Host "Sum: $result"

   ```
---------------------------------------------------------------------------------
Practice:
---------------------------------------------------------------------------------
To solidify your understanding of PowerShell scripting basics, practice the following tasks:

1. Write a PowerShell script that prompts the user to enter their name, then displays a personalized greeting message.

2. Create a script that takes two numbers as input from the user and calculates their sum, difference, product, and quotient. Display the results.

3. Write a script that iterates through a list of numbers (e.g., 1 to 10) and prints whether each number is even or odd.

4. Develop a script that checks if a given directory exists. If it does, display a message indicating its existence; otherwise, create the directory and inform the user.

5. Define a function in a script that takes two parameters (e.g., $num1 and $num2) and returns the larger of the two numbers.

6. Create a script that reads a text file and counts the number of lines it contains. Display the total line count.

By completing these tasks, you will gain practical experience in PowerShell scripting fundamentals, preparing you to tackle more complex automation tasks in your IT environment.

This lesson covers the basics of PowerShell scripting, including script structure, variables, flow control, and functions, with examples provided for each topic.
The practice section offers exercises to reinforce these concepts and build practical scripting skills.




