POWERSHELL COMMANDS INDEX
=================================================================================

A
---------------------------------------------------------------------------------
Add-Content:
- Description: Appends content to the specified items.
- Syntax: Add-Content [-Path] <String[]> [[-Value] <Object>] [-Encoding <Encoding>] [-PassThru] [-NoNewline] [-Stream <String>] [<CommonParameters>]
- Example: Add-Content -Path "C:\file.txt" -Value "New content"

B
---------------------------------------------------------------------------------

C
---------------------------------------------------------------------------------
Copy-Item:
- Description: Copies an item from one location to another.
- Syntax: Copy-Item [-Path] <String[]> [[-Destination] <String>] [-Container] [-Credential <PSCredential>] [-Force] [-Include <String[]>] [-Exclude <String[]>] [-Filter <String>] [-Recurse] [-PassThru] [-UseTransaction] [-ToSession <PSSession>] [<CommonParameters>]
- Example: Copy-Item -Path "C:\file.txt" -Destination "D:\backup"

D
---------------------------------------------------------------------------------

E
---------------------------------------------------------------------------------
Enable-PSRemoting:
- Description: Configures the computer to receive remote commands.
- Syntax: Enable-PSRemoting [-Force] [-SkipNetworkProfileCheck] [-WhatIf] [-Confirm] [<CommonParameters>]
- Example: Enable-PSRemoting

Enter-PSSession:
- Description: Starts an interactive session with a remote computer.
- Syntax: Enter-PSSession [-ComputerName] <String> [-Credential <PSCredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <String>] [-Port <Int32>] [-UseSSL] [-SessionOption <PSSessionOption>] [-ApplicationName <String>] [-ConfigurationName <String>] [-EnableNetworkAccess] [-AllowRedirection] [-ThrottleLimit <Int32>] [-IdleTimeoutSec <Int32>] [-OutputBufferingMode <OutputBufferingMode>] [<CommonParameters>]
- Example: Enter-PSSession -ComputerName "RemoteComputer"

Export-Csv:
- Description: Converts objects into a series of CSV variable-length strings and saves them in a CSV file.
- Syntax: Export-Csv [-Path] <String> [[-Delimiter] <Char>] [-Encoding <Encoding>] [-NoTypeInformation] [-Append] [-Force] [-InputObject <PSObject>] [<CommonParameters>]
- Example: Get-Process | Export-Csv -Path "C:\processes.csv"

F
---------------------------------------------------------------------------------
For-Each:
- Description: Iterates through items in a collection.
- Syntax: ForEach (<variable> in <collection>) { <statement> }
- Example: ForEach ($item in $collection) { Write-Output $item }

Function:
- Description: Defines a new function.
- Syntax: function <name> { <scriptblock> }
- Example: function SayHello { Write-Output "Hello, World!" }

G
---------------------------------------------------------------------------------
Get-ChildItem:
- Description: Retrieves the child items (files and folders) in a specified location.
- Syntax: Get-ChildItem [-Path] <String[]> [-Filter <String>] [-Include <String[]>] [-Exclude <String[]>] [-Recurse] [-Depth <UInt32>] [-Force] [-Name] [-Attributes <FlagsExpression[FileAttributes]>] [-Directory] [-File] [-Hidden] [-ReadOnly] [-System] [<CommonParameters>]
- Example: Get-ChildItem C:\

Get-Command:
- Description: Retrieves all available commands in PowerShell.
- Syntax: Get-Command [-Name <String[]>] [-Module <String[]>] [-CommandType <CommandTypes>] [-TotalCount <Int32>] [-Syntax] [-ParameterName <String[]>] [-ParameterType <PSTypeName[]>] [-ShowCommandInfo] [-FullyQualifiedModule <ModuleSpecification[]>] [-ListImported] [<CommonParameters>]
- Example: Get-Command

Get-Help:
- Description: Retrieves information about PowerShell cmdlets, functions, providers, aliases, and scripts.
- Syntax: Get-Help [-Name] <String[]> [-Parameter <String>] [-Component <String[]>] [-Functionality <String[]>] [-Role <String>] [-Category <String[]>] [-Full] [-Online] [<CommonParameters>]
- Example: Get-Help Get-Process

Get-Item:
- Description: Retrieves the item at the specified location.
- Syntax: Get-Item [-Path] <String[]> [-Filter <String>] [-Include <String[]>] [-Exclude <String[]>] [-Force] [-Name] [-Attributes <FlagsExpression[FileAttributes]>] [-Directory] [-File] [-Hidden] [-ReadOnly] [-System] [<CommonParameters>]
- Example: Get-Item -Path "C:\file.txt"

Get-Process:
- Description: Retrieves information about processes running on a local or remote computer.
- Syntax: Get-Process [[-Name] <String[]>] [-ComputerName <String[]>] [-FileVersionInfo] [-Module] [-IncludeUserName] [<CommonParameters>]
- Example: Get-Process

Get-Service:
- Description: Retrieves the status of services on a computer.
- Syntax: Get-Service [[-Name] <String[]>] [-ComputerName <String[]>] [-DependentServices] [-RequiredServices] [-Exclude <String[]>] [-Include <String[]>] [-RequiredServices] [-Exclude <String[]>] [-Include <String[]>] [-DisplayName <String[]>] [-InputObject <ServiceController[]>] [-StartupType <String[]>] [<CommonParameters>]
- Example: Get-Service

Get-WmiObject:
- Description: Retrieves instances of Windows Management Instrumentation (WMI) classes or information about the available classes.
- Syntax: Get-WmiObject [[-Class] <String>] [-Namespace <String>] [-List] [-Query <String>] [-Authentication <AuthenticationLevel>] [-Impersonation <ImpersonationLevel>] [-ComputerName <String[]>] [-Credential <PSCredential>] [-Filter <String>] [-Locale <String>] [-Property <String[]>] [-Authority <String>] [-EnableAllPrivileges] [<CommonParameters>]
- Example: Get-WmiObject -Class Win32_OperatingSystem

H
---------------------------------------------------------------------------------

I
---------------------------------------------------------------------------------
If:
- Description: Conditionally executes a statement based on the value of a condition.
- Syntax: if (<condition>) { <statement> } [elseif (<condition>) { <statement> }] [else { <statement> }]
- Example: if ($var -eq "value") { Write-Output "Variable is equal to 'value'" }

Import-Module:
- Description: Imports a module into the current session.
- Syntax: Import-Module [-Name] <String[]> [-Function <Hashtable>] [-Cmdlet <Hashtable>] [-Variable <Hashtable>] [-Alias <Hashtable>] [-ArgumentList <Object[]>] [-PassThru] [-Global] [-NoClobber] [-Force] [-Prefix <String>] [-DisableNameChecking] [-AsCustomObject] [<CommonParameters>]
- Example: Import-Module MyModule

Invoke-Command:
- Description: Runs commands on local and remote computers.
- Syntax: Invoke-Command [-ComputerName] <String[]> [-ScriptBlock] <ScriptBlock> [-Credential <PSCredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <String>] [-Port <Int32>] [-UseSSL] [-ConfigurationName <String>] [-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [-AsJob] [-HideComputerName] [-EnableNetworkAccess] [-InputObject <PSObject>] [<CommonParameters>]
- Example: Invoke-Command -ComputerName "Server01" -ScriptBlock { Get-Process }

J
---------------------------------------------------------------------------------

K
---------------------------------------------------------------------------------

L
---------------------------------------------------------------------------------

M
---------------------------------------------------------------------------------
Measure-Command:
- Description: Measures the time it takes to run script blocks or cmdlets.
- Syntax: Measure-Command [-Expression] <ScriptBlock> [<CommonParameters>]
- Example: Measure-Command { Get-Process }

N
---------------------------------------------------------------------------------
New-Module:
- Description: Creates a new dynamic module.
- Syntax: New-Module [[-Name] <String>] [-ScriptBlock <ScriptBlock>] [-Function <Hashtable>] [-Cmdlet <Hashtable>] [-Variable <Hashtable>] [-Alias <Hashtable>] [-AsCustomObject] [<CommonParameters>]
- Example: New-Module -ScriptBlock { function Test { Write-Output "This is a test function." } }

O
---------------------------------------------------------------------------------

P
---------------------------------------------------------------------------------

Q
---------------------------------------------------------------------------------

R
---------------------------------------------------------------------------------
Remove-Item:
- Description: Deletes the specified items.
- Syntax: Remove-Item [-Path] <String[]> [-Filter <String>] [-Include <String[]>] [-Exclude <String[]>] [-Recurse] [-Force] [-Confirm] [-WhatIf] [<CommonParameters>]
- Example: Remove-Item -Path "C:\file.txt"

S
---------------------------------------------------------------------------------
Set-Variable:
- Description: Sets the value of a variable.
- Syntax: Set-Variable [-Name] <String> [-Value] <Object> [-Option <ScopedItemOptions>] [-PassThru] [-Scope <String>] [-Description <String>] [-Force] [<CommonParameters>]
- Example: Set-Variable -Name "var" -Value "value"

Sort-Object:
- Description: Sorts objects by property values.
- Syntax: Sort-Object [[-Property] <Object[]>] [-Descending] [-CaseSensitive] [-CultureInfo <CultureInfo>] [-Unique] [<CommonParameters>]
- Example: Get-Process | Sort-Object CPU -Descending

Start-Transcript:
- Description: Starts a transcript of a command session.
- Syntax: Start-Transcript [[-Path] <String>] [-Force] [-NoClobber] [-Append] [<CommonParameters>]
- Example: Start-Transcript -Path "C:\transcript.txt"

T
---------------------------------------------------------------------------------
Test-Path:
- Description: Determines whether all elements of a path exist.
- Syntax: Test-Path [-Path] <String[]> [-IsValid] [-Include <String[]>] [-Exclude <String[]>] [-PathType <PathType>] [<CommonParameters>]
- Example: Test-Path -Path "C:\file.txt"

U
---------------------------------------------------------------------------------

V
---------------------------------------------------------------------------------

W
---------------------------------------------------------------------------------
Write-Error:
- Description: Writes an error message to the error stream.
- Syntax: Write-Error [-Message] <String> [-Category <ErrorCategory>] [-ErrorAction <ActionPreference>] [-ErrorVariable <String>] [-WarningAction <ActionPreference>] [-WarningVariable <String>] [-OutVariable <String>] [-OutBuffer <Int32>] [<CommonParameters>]
- Example: Write-Error -Message "An error occurred."

Write-Output:
- Description: Sends the specified objects to the next command in the pipeline.
- Syntax: Write-Output [-InputObject] <psobject> [-NoEnumerate] [<CommonParameters>]
- Example: Write-Output "Hello, World!"

Write-Verbose:
- Description: Writes text to the verbose message stream.
- Syntax: Write-Verbose [-Message] <String> [-Prefix <String>] [<CommonParameters>]
- Example: Write-Verbose -Message "Verbose message"

X
---------------------------------------------------------------------------------

Y
---------------------------------------------------------------------------------

Z
---------------------------------------------------------------------------------
